class Solution{
    public:
    int removeDuplicates(vector<int>& arr) {

        int i = 0;  // Initialize `i` to track the position for unique elements
        // Dry Run Start:
        // Initial Array: [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
        // i = 0

        for (int j = 1; j < arr.size(); j++) {
            // j starts from 1 to scan the array
            if (arr[i] != arr[j]) {  // Check if arr[i] (current unique) is different from arr[j]
                arr[i + 1] = arr[j];  // Place unique element at next position after `i`
                i++;  // Move `i` to the next unique position

                // Dry Run Details:
                // Step-by-Step:
                // j = 1: arr[i] = 0, arr[j] = 0 --> no update needed
                // j = 2: arr[i] = 0, arr[j] = 1 --> arr[1] = 1, i = 1
                // Array after Step: [0, 1, 1, 1, 1, 2, 2, 3, 3, 4]
                
                // j = 3: arr[i] = 1, arr[j] = 1 --> no update needed
                // j = 4: arr[i] = 1, arr[j] = 1 --> no update needed
                // j = 5: arr[i] = 1, arr[j] = 2 --> arr[2] = 2, i = 2
                // Array after Step: [0, 1, 2, 1, 1, 2, 2, 3, 3, 4]
                
                // j = 6: arr[i] = 2, arr[j] = 2 --> no update needed
                // j = 7: arr[i] = 2, arr[j] = 3 --> arr[3] = 3, i = 3
                // Array after Step: [0, 1, 2, 3, 1, 2, 2, 3, 3, 4]
                
                // j = 8: arr[i] = 3, arr[j] = 3 --> no update needed
                // j = 9: arr[i] = 3, arr[j] = 4 --> arr[4] = 4, i = 4
                // Array after Step: [0, 1, 2, 3, 4, 2, 2, 3, 3, 4]
            }
        }

        // `i + 1` gives the count of unique elements
        return i + 1;  // Final Result: i + 1 = 5, meaning 5 unique elements

        // Final Array Output: [0, 1, 2, 3, 4, _, _, _, _, _]
    }
};

// Explanation:
// The function returns 5, indicating there are 5 unique elements (0, 1, 2, 3, 4).
// The modified array contains these unique elements in the first 5 positions, as expected.
