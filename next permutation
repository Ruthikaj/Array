class Solution {
public:
    void nextPermutation(vector<int>& arr) {
        int index = -1;      // Step 1: Initialize `index` to -1. This will store the rightmost index where arr[i] < arr[i+1].
        int n = arr.size();   // Get the size of the array.

        // Step 1: Find the largest index `i` such that arr[i] < arr[i+1]
        //         This will identify the longest decreasing suffix.
        for (int i = n - 2; i >= 0; i--) {  // Start from the second-last element and move left
            if (arr[i] < arr[i + 1]) {      // Check if the current element is smaller than the next
                index = i;                  // If so, store the index and break out
                break;
            }
        }

        // Dry run example:
        // Input array: arr = [1, 3, 5, 4, 2]
        // For loop iterations:
        // i = 3: arr[3] = 4, arr[4] = 2 -> 4 is not less than 2, continue
        // i = 2: arr[2] = 5, arr[3] = 4 -> 5 is not less than 4, continue
        // i = 1: arr[1] = 3, arr[2] = 5 -> 3 < 5, so we set index = 1 and break
        // Result: index = 1

        // Step 2: If no such index is found (index == -1), then the array is sorted in descending order.
        //         In this case, simply reverse it to get the smallest permutation (sorted in ascending order).
        if (index == -1) {                // If `index` remains -1, the array is in descending order
            reverse(arr.begin(), arr.end()); // Reverse the entire array
            return;                       // Return as we already have the smallest permutation
        }

        // In our example, `index` is 1, so we skip this part.

        // Step 3: Find the smallest number on the right of `index` that is greater than arr[index]
        //         This will be the element we swap with arr[index] to get the next permutation.
        for (int i = n - 1; i > index; i--) {  // Start from the last element and move left
            if (arr[i] > arr[index]) {         // Find the first element larger than arr[index]
                swap(arr[index], arr[i]);      // Swap this element with arr[index]
                break;                         // Break as we only need to swap once
            }
        }

        // Continuing the dry run:
        // Input after finding index = 1: arr = [1, 3, 5, 4, 2]
        // We need to find the smallest element > arr[1] (which is 3) to the right of index 1.
        // i = 4: arr[4] = 2, which is not > 3, continue
        // i = 3: arr[3] = 4, which is > 3, so we swap arr[1] and arr[3]
        // Array after swap: arr = [1, 4, 5, 3, 2]

        // Step 4: Reverse the elements to the right of `index` to get the smallest lexicographical order.
        //         This ensures we get the next smallest permutation.
        reverse(arr.begin() + index + 1, arr.end());  // Reverse the elements after index

        // Final step in dry run:
        // Array after swap: arr = [1, 4, 5, 3, 2]
        // Reverse elements to the right of index 1 (i.e., from index 2 to end)
        // Result after reverse: arr = [1, 4, 2, 3, 5]

        // Final output for the input [1, 3, 5, 4, 2] is [1, 4, 2, 3, 5]
    }
};
